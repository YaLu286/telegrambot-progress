package main

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/redis/go-redis/v9"
	"os"
	"slices"
	"strings"
	"telegrambot/progress/controllers"
	"telegrambot/progress/models"
)

var commandKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–ø–∏—Å–æ–∫"),
		tgbotapi.NewKeyboardButton("–ò–Ω—Ñ–æ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–§–∏–ª—å—Ç—Ä—ã"),
		tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å"),
	),
)

var filtersSelectKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∏–ª–∏", "styles"),
		tgbotapi.NewInlineKeyboardButtonData("–ü–∏–≤–æ–≤–∞—Ä–Ω–∏", "breweries"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–±—Ä–æ—Å–∏—Ç—å", "clear"),
	),
)

var styleSelectKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("APA", "APA"),
		tgbotapi.NewInlineKeyboardButtonData("Lager", "Lager"),
		tgbotapi.NewInlineKeyboardButtonData("Sour - Fruited", "Sour - Fruited"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("NE Pale Ale", "NE Pale Ale"),
		tgbotapi.NewInlineKeyboardButtonData("Gose", "Gose"),
		tgbotapi.NewInlineKeyboardButtonData("Sour - Fruited", "Sour - Fruited"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
	),
)

var brewerySelectKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("AFBrew", "AFBrew"),
		tgbotapi.NewInlineKeyboardButtonData("Zavod", "Zavod"),
		tgbotapi.NewInlineKeyboardButtonData("4Brewers", "4Brewers"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Stamm Brewing", "Stamm Brewing"),
		tgbotapi.NewInlineKeyboardButtonData("Red Button", "Red Button"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
	),
)

func remove_str_from_arr(s []string, r string) []string {
	for i, v := range s {
		if v == r {
			return append(s[:i], s[i+1:]...)
		}
	}
	return s
}

var RedisClient *redis.Client

func update_filters(category string, update *tgbotapi.Update, callback *tgbotapi.CallbackConfig) {

	ctx := context.Background()

	var new_filters_str string
	current_filters_array := strings.Split(RedisClient.HGetAll(ctx, fmt.Sprint(update.CallbackQuery.From.ID)).Val()[category], ",")

	if !slices.Contains(current_filters_array, update.CallbackQuery.Data) {
		current_filters_str := strings.Join(current_filters_array, ",")
		current_filters_array = remove_str_from_arr(current_filters_array, "")
		new_filters_str = strings.Join([]string{current_filters_str, update.CallbackQuery.Data}, ",")
		callback.Text = "–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: " + update.CallbackQuery.Data
	} else {
		current_filters_array = remove_str_from_arr(current_filters_array, update.CallbackQuery.Data)
		new_filters_str = strings.Join(current_filters_array, ",")
		callback.Text = "–£–¥–∞–ª—ë–Ω —Ñ–∏–ª—å—Ç—Ä: " + update.CallbackQuery.Data
	}

	RedisClient.HSet(ctx, fmt.Sprint(update.CallbackQuery.From.ID), category, new_filters_str)
}

func main() {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
	if err != nil {
		panic(err)
	}
	bot.Debug = true

	models.ConnectDatabase()

	updateConfig := tgbotapi.NewUpdate(0)

	updateConfig.Timeout = 30

	updates := bot.GetUpdatesChan(updateConfig)

	RedisClient = redis.NewClient(&redis.Options{
		Addr:     "localhost:6379",
		Password: "", // no password set
		DB:       0,  // use default DB
	})

	for update := range updates {

		ctx := context.Background()

		if update.Message != nil {

			UserID := update.Message.From.ID
			msg := tgbotapi.NewMessage(UserID, "")

			msg.ReplyMarkup = commandKeyboard
			msg.ParseMode = "markdown"

			switch update.Message.Text {
			case "/start":
				photo := tgbotapi.NewPhoto(UserID, tgbotapi.FilePath("/Users/yalu/images/progress.jpg"))
				photo.ParseMode = "markdown"
				photo.Caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –°–æ–∫–æ–ª–µ*!\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –±—É—Ç—ã–ª–æ—á–Ω–æ–≥–æ –ø–∏–≤–∞/—Å–∏–¥—Ä–∞ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\nüìû–¢–µ–ª–µ—Ñ–æ–Ω:+7(925)433-52-94\nüì©Email: progress.sokol@gmail.com"
				photo.ReplyMarkup = commandKeyboard
				bot.Send(photo)
				err := RedisClient.HSet(ctx, fmt.Sprint(UserID), "state", "start").Err()
				if err != nil {
					panic(err)
				}
			case "–ò–Ω—Ñ–æ":
				photo := tgbotapi.NewPhoto(UserID, tgbotapi.FilePath("/Users/yalu/images/progress.jpg"))
				photo.ParseMode = "markdown"
				photo.Caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –°–æ–∫–æ–ª–µ*!\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –±—É—Ç—ã–ª–æ—á–Ω–æ–≥–æ –ø–∏–≤–∞ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\n–¢–µ–ª–µ—Ñ–æ–Ω:+7(925)433-52-94\nEmail: progress.sokol@gmail.com"
				bot.Send(photo)

			case "–°–ø–∏—Å–æ–∫":
				var favorite_breweries []string
				var favorite_styles []string
				favorite_breweries = strings.Split(RedisClient.HGetAll(ctx, fmt.Sprint(UserID)).Val()["brewery"], ",")
				favorite_styles = strings.Split(RedisClient.HGetAll(ctx, fmt.Sprint(UserID)).Val()["style"], ",")
				favorite_breweries = remove_str_from_arr(favorite_breweries, "")
				favorite_styles = remove_str_from_arr(favorite_styles, "")

				var bottles []models.Beer

				if len(favorite_breweries) == 0 && len(favorite_styles) == 0 {
					bottles = controllers.FindAllBeer()
					msg.Text = "–§–∏–ª—å—Ç—Ä—ã\n–ü–∏–≤–æ–≤–∞—Ä–Ω–∏: -\n–°—Ç–∏–ª–∏: -"
				} else {
					bottles = controllers.FindBeer(favorite_breweries, favorite_styles)
					msg.Text = "–§–∏–ª—å—Ç—Ä—ã\n–ü–∏–≤–æ–≤–∞—Ä–Ω–∏: " + strings.Join(favorite_breweries, ", ") + "\n–°—Ç–∏–ª–∏: " + strings.Join(favorite_styles, ", ")
				}
				bot.Send(msg)
				for _, bottle := range bottles {
					bottle_description := fmt.Sprintf("%s –æ—Ç %s \n–°—Ç–∏–ª—å: %s\nABV: %.2f Rate: %.2f\n%s\n%d‚ÇΩ", bottle.Name, bottle.Brewery,
						bottle.Style, bottle.ABV,
						bottle.Rate, bottle.Brief, bottle.Price)
					photo := tgbotapi.NewPhoto(update.Message.From.ID, tgbotapi.FilePath(bottle.ImagePath))
					photo.Caption = bottle_description
					if _, err = bot.Send(photo); err != nil {
						panic(err)
					}
				}

			case "–§–∏–ª—å—Ç—Ä—ã":
				RedisClient.HSet(ctx, fmt.Sprint(UserID), "state", "filters")
				msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã"
				msg.ReplyMarkup = filtersSelectKeyboard
				bot.Send(msg)

			case "–ü–æ–º–æ—â—å":

				msg.Text = "–ù–∞–∂–º–∏—Ç–µ *–°–ø–∏—Å–æ–∫* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∏–≤–∞/—Å–∏–¥—Ä–∞ –≤ –±—É—Ç—ã–ª–∫–∞—Ö.\n–ù–∞–∂–º–∏—Ç–µ *–§–∏–ª—å—Ç—Ä—ã* –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n–ù–∞–∂–º–∏—Ç–µ *–ò–Ω—Ñ–æ* –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n–ù–∞–∂–º–∏—Ç–µ *–ü–æ–º–æ—â—å*, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
				bot.Send(msg)
			}

		} else if update.CallbackQuery != nil {

			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
			UserID := update.CallbackQuery.From.ID

			if update.CallbackQuery.Message.Text == "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã" {
				re_msg := tgbotapi.NewEditMessageText(UserID, update.CallbackQuery.Message.MessageID, update.CallbackQuery.Message.Text)
				switch update.CallbackQuery.Data {
				case "styles":
					re_msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏"
					re_msg.ReplyMarkup = &styleSelectKeyboard
					bot.Send(re_msg)
				case "breweries":
					re_msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏"
					re_msg.ReplyMarkup = &brewerySelectKeyboard
					bot.Send(re_msg)
				case "clear":
					RedisClient.HDel(ctx, fmt.Sprint(UserID), "style")
					RedisClient.HDel(ctx, fmt.Sprint(UserID), "brewery")
					callback.Text = "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã"
				}
			}

			if update.CallbackQuery.Message.Text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏" || update.CallbackQuery.Message.Text == "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏" {

				if update.CallbackQuery.Data == "back" {
					re_msg := tgbotapi.NewEditMessageText(UserID, update.CallbackQuery.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã")
					re_msg.ReplyMarkup = &filtersSelectKeyboard
					bot.Send(re_msg)
				} else {
					var category string
					switch update.CallbackQuery.Message.Text {
					case "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏":
						category = "style"
					case "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏":
						category = "brewery"
					}
					update_filters(category, &update, &callback)
				}

			}

			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}

		}

	}

}
