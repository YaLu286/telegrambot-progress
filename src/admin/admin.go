package admin

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"slices"
	"strconv"
	"telegrambot/progress/controllers"
	"telegrambot/progress/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var adminCommandKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏"),
	),
)

var adminCreateKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
	),
)

var adminChangeKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ"),
		tgbotapi.NewKeyboardButton("–ü–∏–≤–æ–≤–∞—Ä–Ω—è"),
		tgbotapi.NewKeyboardButton("–°—Ç–∏–ª—å"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("ABV"),
		tgbotapi.NewKeyboardButton("–†–µ–π—Ç–∏–Ω–≥"),
		tgbotapi.NewKeyboardButton("–¶–µ–Ω–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
	),
)

var actionChoiseKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå", "delete"),
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ|üö´", "available_switch"),
		tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è", "change"),
	),
)

func Auth(session *models.UserSession) bool {
	var adm models.Admin
	res := models.DB.First(&adm, "id = ?", session.UserID)
	if res != nil {
		session.SetUserState("admin")
		session.SetAdminMode(adm.AdminMode)
		return true
	}
	return false
}

func SavePhoto(fullURLFile string, fileName string) {

	file, _ := os.Create(fileName)

	client := http.Client{
		CheckRedirect: func(r *http.Request, via []*http.Request) error {
			r.URL.Opaque = r.URL.Path
			return nil
		},
	}
	resp, _ := client.Get(fullURLFile)

	defer resp.Body.Close()
	io.Copy(file, resp.Body)
	defer file.Close()
}

func CreateBeerPanel(bot *tgbotapi.BotAPI, admChan chan tgbotapi.Update) {
	var newBeer models.Beer

	var maxIDbeer models.Beer
	models.DB.Last(&maxIDbeer)
	newBeer.ID = maxIDbeer.ID + 1

	update := <-admChan
	msg := tgbotapi.NewMessage(update.Message.From.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
	bot.Send(msg)
	update = <-admChan
	newBeer.Name = update.Message.Text

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏:"
	bot.Send(msg)
	update = <-admChan
	newBeer.Brewery = update.Message.Text

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å –ø–∏–≤–∞:"
	bot.Send(msg)
	update = <-admChan
	newBeer.Style = update.Message.Text

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏–≤–∞:"
	bot.Send(msg)
	update = <-admChan
	newBeer.Brief = update.Message.Text

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ABV:"
	bot.Send(msg)
	update = <-admChan
	newBeer.ABV, _ = strconv.ParseFloat(update.Message.Text, 32)

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–≤–∞ –≤ Untappd:"
	bot.Send(msg)
	update = <-admChan
	newBeer.Rate, _ = strconv.ParseFloat(update.Message.Text, 32)

	msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∏–≤–∞:"
	bot.Send(msg)
	update = <-admChan
	newBeer.Price, _ = strconv.Atoi(update.Message.Text)

	msg.Text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏–≤–∞"
	bot.Send(msg)
	update = <-admChan
	photoURL, _ := bot.GetFileDirectURL(update.Message.Photo[len(update.Message.Photo)-1].FileID)
	var fileName string = "/images/" + newBeer.Name + ".jpg"
	SavePhoto(photoURL, fileName)
	newBeer.ImagePath = fileName

	newBeer.Create()
}

func ChangeBeerPanel(bot *tgbotapi.BotAPI, admChan chan tgbotapi.Update, changeID int64, AdminID int64) {
	var Beer models.Beer
	models.DB.Find(&Beer, changeID)

	msg := tgbotapi.NewMessage(AdminID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
	msg.ReplyMarkup = adminChangeKeyboard
	bot.Send(msg)

	for {
		update := <-admChan
		if update.Message != nil {
			switch update.Message.Text {
			case "–ù–∞–∑–≤–∞–Ω–∏–µ":
				msg.Text = "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
				bot.Send(msg)
				msg.Text = Beer.Name
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Name = update.Message.Text
				}

			case "–ü–∏–≤–æ–≤–∞—Ä–Ω—è":
				msg.Text = "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏:"
				bot.Send(msg)
				msg.Text = Beer.Brewery
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏ –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Brewery = update.Message.Text
				}
			case "–°—Ç–∏–ª—å":
				msg.Text = "–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:"

				bot.Send(msg)
				msg.Text = Beer.Style
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Style = update.Message.Text
				}

			case "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ":
				msg.Text = "–¢–µ–∫—É—â–µ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
				bot.Send(msg)
				msg.Text = Beer.Brief
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Brief = update.Message.Text
				}
			case "ABV":
				msg.Text = "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ABV:"
				bot.Send(msg)
				msg.Text = strconv.FormatFloat(Beer.ABV, 'f', 2, 32)
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ABV –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.ABV, _ = strconv.ParseFloat(update.Message.Text, 32)
				}
			case "–†–µ–π—Ç–∏–Ω–≥":
				msg.Text = "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ Untappd:"
				bot.Send(msg)
				msg.Text = strconv.FormatFloat(Beer.Rate, 'f', 2, 32)
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ Untappd –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Rate, _ = strconv.ParseFloat(update.Message.Text, 32)
				}
			case "–°—Ç–æ–∏–º–æ—Å—Ç—å":
				msg.Text = "–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:"
				bot.Send(msg)
				msg.Text = fmt.Sprint(Beer.Price)
				bot.Send(msg)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ - , —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
				bot.Send(msg)
				update = <-admChan
				if update.Message.Text != "-" {
					Beer.Price, _ = strconv.Atoi(update.Message.Text)
				}

			case "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è":
				models.DB.Save(&Beer)
				msg.Text = "–ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
				msg.ReplyMarkup = adminCommandKeyboard
				bot.Send(msg)
				return
			}
		}
	}
}

func DisplayBeerListForAdmin(bot *tgbotapi.BotAPI, update tgbotapi.Update, AdminLocation string) {
	var bottles []models.Beer

	bottles = controllers.FindAllBeerForAdmin()
	for _, bottle := range bottles {
		var availability string
		if slices.Contains(bottle.Availability, AdminLocation) {
			availability = "‚úÖ"
		} else {
			availability = "üö´"
		}
		bottle_description := fmt.Sprintf("ID:%d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ü–∏–≤–æ–≤–∞—Ä–Ω—è: %s\n–°—Ç–∏–ª—å: %s\nABV: %.2f\n–†–µ–π—Ç–∏–Ω–≥:%.2f\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°—Ç–æ–∏–º–æ—Å—Ç—å:%d‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏:%s",
			bottle.ID, bottle.Name,
			bottle.Brewery, bottle.Style,
			bottle.ABV, bottle.Rate,
			bottle.Brief, bottle.Price,
			availability)
		photo := tgbotapi.NewPhoto(update.Message.From.ID, tgbotapi.FilePath(bottle.ImagePath))
		photo.Caption = bottle_description
		photo.ReplyMarkup = actionChoiseKeyboard
		if _, err := bot.Send(photo); err != nil {
			panic(err)
		}
	}
}

func AdmPanel(bot *tgbotapi.BotAPI, admChan chan tgbotapi.Update) {
	defer close(admChan)
	for {
		update := <-admChan
		if update.Message != nil {
			UserID := update.Message.From.ID
			session := &models.UserSession{UserID: UserID}
			session.LoadInfo()
			switch update.Message.Text {
			case "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é":
				msg := tgbotapi.NewMessage(UserID, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏")
				bot.Send(msg)
				CreateBeerPanel(bot, admChan)
			case "–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π":
				DisplayBeerListForAdmin(bot, update, session.AdmMode)
			case "–í—ã–π—Ç–∏":
				msg := tgbotapi.NewMessage(session.UserID, "–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
				msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				bot.Send(msg)
				session.SetUserState("start")
				return
			default:
				msg := tgbotapi.NewMessage(UserID, "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
				msg.ReplyMarkup = adminCommandKeyboard
				bot.Send(msg)
			}
		} else if update.CallbackQuery != nil {
			UserID := update.CallbackQuery.From.ID
			session := &models.UserSession{UserID: UserID}
			session.LoadInfo()
			switch update.CallbackQuery.Data {
			case "change":
				text := update.CallbackQuery.Message.Caption
				var changeID int64
				fmt.Sscanf(text, "ID:%d%s", &changeID, &text)
				msg := tgbotapi.NewMessage(update.CallbackQuery.From.ID, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
				bot.Send(msg)
				ChangeBeerPanel(bot, admChan, changeID, update.CallbackQuery.From.ID)
			case "available_switch":
				text := update.CallbackQuery.Message.Caption
				var beerID int64
				fmt.Sscanf(text, "ID:%d", &beerID)
				var beer models.Beer
				models.DB.Find(&beer, beerID)
				beer.SwitchAvailability(session.AdmMode)
				var availability string
				if slices.Contains(beer.Availability, session.AdmMode) {
					availability = "‚úÖ"
				} else {
					availability = "üö´"
				}
				re_msg := tgbotapi.NewEditMessageCaption(session.UserID, update.CallbackQuery.Message.MessageID, "")
				re_msg.Caption = fmt.Sprintf("ID:%d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ü–∏–≤–æ–≤–∞—Ä–Ω—è: %s\n–°—Ç–∏–ª—å: %s\nABV: %.2f\n–†–µ–π—Ç–∏–Ω–≥:%.2f\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°—Ç–æ–∏–º–æ—Å—Ç—å:%d‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏:%s",
					beer.ID, beer.Name,
					beer.Brewery, beer.Style,
					beer.ABV, beer.Rate,
					beer.Brief, beer.Price,
					availability)
				re_msg.ReplyMarkup = &actionChoiseKeyboard
				bot.Send(re_msg)

			case "delete":
				text := update.CallbackQuery.Message.Caption
				var deleteBeer models.Beer
				fmt.Sscanf(text, "ID:%d%s", &deleteBeer.ID, &text)
				if err := deleteBeer.Delete(); err == nil {
					CallbackMsg := tgbotapi.NewCallback(update.CallbackQuery.ID, "–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
					DelMsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.From.ID, update.CallbackQuery.Message.MessageID)
					bot.Request(CallbackMsg)
					bot.Request(DelMsg)
				}
			}
		}
	}

}
